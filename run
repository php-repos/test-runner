#!/usr/bin/env php
<?php

$allFiles = function ($directory) use (&$allFiles) {
    $files = [];
    $items = scandir($directory);

    foreach ($items as $key => $value) {
        $path = realpath($directory . DIRECTORY_SEPARATOR . $value);

        if (!is_dir($path)) {
            $files[] = $path;
        } else if ($value != "." && $value != "..") {
            $files = array_merge($files, $allFiles($path));
        }
    }

    return $files;
};

$testsDirectory = $_SERVER['PWD']  . '/Tests/';
$assertions = $allFiles(__DIR__ . '/Source/Assertions/');
$assertions = array_filter($assertions, function ($filePath) {
    return str_ends_with($filePath, '.php');
});
requireFiles($assertions);

$files = $allFiles($testsDirectory);
$regularFiles = array_filter($files, function ($filePath) {
    return str_ends_with($filePath, '.php') && ! str_ends_with($filePath, 'Test.php');
});
$testFiles = array_filter($files, function ($filePath) {
    return str_ends_with($filePath, 'Test.php');
});

requireFiles($regularFiles);
requireFiles($testFiles);

function requireFiles($filePaths)
{
    array_walk(
        $filePaths,
        function ($filePath) {
            require_once $filePath;
        }
    );
}

function test(string $title, Closure $case, ?Closure $before = null, ?Closure $after = null, ?Closure $finally = null)
{
    try {
        $beforeHookOutput = $before ? call_user_func($before) : null;

        $reflection = new ReflectionFunction($case);
        if ($reflection->getNumberOfParameters() > 1) {
            $caseOutput = call_user_func($case, ...$beforeHookOutput);
        } else {
            $caseOutput = call_user_func($case, $beforeHookOutput);
        }

        if ($after) {
            $reflection = new ReflectionFunction($after);
            if ($reflection->getNumberOfParameters() > 1) {
                call_user_func($after, ...$caseOutput);
            } else {
                call_user_func($after, $caseOutput);
            }
        }
        success($title);
    } catch (AssertionError $exception) {
        $message = $title . ': ' . $exception->getMessage();
        error($message);
    } finally {
        if ($finally) {
            call_user_func($finally);
        }
    }
}

function success($message)
{
    echo "✅ $message" . PHP_EOL;
}

function error($message)
{
    echo "❌ $message" . PHP_EOL;
}
