#!/usr/bin/env php
<?php

// These lines are required to let Saeghe runs test since we can not use `build` on submodules
if (isset($argv[1]) && $argv[1] === 'saeghe') {
    require_once __DIR__ . '/../cli/Source/IO/Read.php';
    require_once __DIR__ . '/../cli/Source/IO/Write.php';
    require_once __DIR__ . '/Source/Assertions/File.php';
}

use function Saeghe\Cli\IO\Read\parameter;
use function Saeghe\Cli\IO\Write\error;
use function Saeghe\Cli\IO\Write\line;

$allFiles = function ($directory) use (&$allFiles) {
    $files = [];
    $items = scandir($directory);

    foreach ($items as $key => $value) {
        $path = realpath($directory . DIRECTORY_SEPARATOR . $value);

        if (!is_dir($path)) {
            $files[] = $path;
        } else if ($value != "." && $value != "..") {
            $files = array_merge($files, $allFiles($path));
        }
    }

    return $files;
};

$testsDirectory = $_SERVER['PWD']  . '/' . parameter('directory', 'Tests') . '/';

$files = $allFiles($testsDirectory);

$filter = parameter('filter', '');

$testFiles = array_filter($files, function ($filePath) use ($filter) {
    return str_contains($filePath, $filter) && str_ends_with($filePath, 'Test.php');
});

static $statistics = ['cases' => 0, 'success' => 0, 'failed' => 0];

function test(string $title, Closure $case, ?Closure $before = null, ?Closure $after = null, ?Closure $finally = null)
{
    global $statistics;

    $statistics['cases']++;

    try {
        $beforeHookOutput = $before ? call_user_func($before) : null;

        $reflection = new ReflectionFunction($case);
        if ($reflection->getNumberOfParameters() > 1) {
            $caseOutput = call_user_func($case, ...$beforeHookOutput);
        } else {
            $caseOutput = call_user_func($case, $beforeHookOutput);
        }

        if ($after) {
            $reflection = new ReflectionFunction($after);
            if ($reflection->getNumberOfParameters() > 1) {
                call_user_func($after, ...$caseOutput);
            } else {
                call_user_func($after, $caseOutput);
            }
        }
        $statistics['success']++;
        line("✅ $title");
    } catch (AssertionError $exception) {
        $statistics['failed']++;
        line("❌ $title: ");
        error($exception->getMessage());
    } finally {
        if ($finally) {
            call_user_func($finally);
        }
    }
}

requireFiles($testFiles);

function requireFiles($filePaths)
{
    array_walk(
        $filePaths,
        function ($filePath) {
            require_once $filePath;
        }
    );
}

line(PHP_EOL . "cases: {$statistics['cases']}, success: {$statistics['success']}, failed: {$statistics['failed']}");
